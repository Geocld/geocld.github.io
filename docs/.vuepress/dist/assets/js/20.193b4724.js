(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{484:function(n,e,c){"use strict";c.r(e);var t=c(62),a=Object(t.a)({},(function(){var n=this,e=n.$createElement,c=n._self._c||e;return c("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[c("p",[n._v("网络信息传递时，一些二进制资源往往需要转换为Base64编码进行传输，以提高传输效率，例如webpack提供了将图片格式文件转换为Base64格式，下面将简单介绍Base64编码的原理和实现过程。")]),n._v(" "),c("p",[n._v("##Base64编码原理\nBase64是一种基于64个可打印字符来表示二进制数据的表示方法。base64要求将每三个8bits字节转换为四个6bit的字节(3 * 8 = 4 * 6 = 24),然后将转换后的6bit往高位添加2个0,组成4个8bit的字节，再根据这4个8bit字节的十进制在索引表中查找对应的值，此时得到的结果就是Base64值。")]),n._v(" "),c("p",[n._v("因此，理论上，"),c("strong",[n._v("转换后的字符串的长度要比原来的字符串长度长1/3")]),n._v("，例如：转换前的4*6二进制字符串为：aaaaaa bbbbbb cccccc dddddd,在每个字节高位添加两个零后就是: 00aaaaaa 00bbbbbb 00cccccc 00dddddd,此时长度就比原字符串长度多了1/3。")]),n._v(" "),c("p",[n._v("一下是一段话编码为Base64前后的变化：")]),n._v(" "),c("p",[n._v("编码前：")]),n._v(" "),c("div",{staticClass:"language- extra-class"},[c("pre",[c("code",[n._v("Man is distinguished, not only by his reason, but by this singular passion from\nother animals, which is a lust of the mind, that by a perseverance of delight\nin the continued and indefatigable generation of knowledge, exceeds the short\nvehemence of any carnal pleasure.\n")])])]),c("p",[n._v("编码后：")]),n._v(" "),c("div",{staticClass:"language- extra-class"},[c("pre",[c("code",[n._v("TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz\nIHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2Yg\ndGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGlu\ndWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRo\nZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=\n")])])]),c("p",[n._v('前面提到了Base64算法的索引表，Base64的索引表由64个ASCII字符组成：0-9，26个英文小写字母a-z，26个英文大写字母：A-Z，除此之外还有额外两个字符"+"和"/"。下面是Base64的索引表：')]),n._v(" "),c("p",[c("img",{attrs:{src:"http://i.imgur.com/4wh9OVF.png",alt:""}})]),n._v(" "),c("p",[n._v('理论上上面的索引表还要加入padding:"="，前面提到一个字符串转成Base64时是生成4个字符，如果待转换的字符串转换后不足4个Base64字符，则空白的地方需要使用“=”补充，看下面的例子就能明白：')]),n._v(" "),c("p",[n._v('文本"M"转换为Base64的过程：')]),n._v(" "),c("p",[c("img",{attrs:{src:"http://i.imgur.com/IOGb2ZE.png",alt:""}})]),n._v(" "),c("p",[n._v('在这里，"M"转换后的ASCII不足以填充够24位二进制字符串，再第二个字节之后，全部用"0"补充，得到的索引值即分别为"T","Q","=","=",最终的Base64编码结果为"TQ==".')]),n._v(" "),c("p",[n._v('再来看两个个例子加深印象,字符串"Ma":')]),n._v(" "),c("p",[c("img",{attrs:{src:"http://i.imgur.com/FXWHGmh.png",alt:""}})]),n._v(" "),c("p",[n._v('转换后的Base64结果为："TWE="。')]),n._v(" "),c("p",[n._v('字符串"Man":')]),n._v(" "),c("p",[c("img",{attrs:{src:"http://i.imgur.com/ZoLq9DI.png",alt:""}})]),n._v(" "),c("p",[n._v('转换后结果为"TWFu"。')]),n._v(" "),c("p",[n._v("这里进行一个小结，普通字符串文本转换为Base64的基本过程为:")]),n._v(" "),c("p",[c("strong",[n._v("字符串对应的字符转换为ASCII→将该ASCII转换为8位二进制→将转换的8位二进制进行6bit拆分，高位填充0，形成新的二进制→根据新的二进制从Base64索引表查找结果")])]),n._v(" "),c("p",[n._v("##Base64编码的实现")]),n._v(" "),c("p",[n._v("了解了Base64的转换规则后，我们通过JavaScript来简单实现Base的"),c("code",[n._v("编码")]),n._v("以及"),c("code",[n._v("解码")]),n._v(":")]),n._v(" "),c("div",{staticClass:"language- extra-class"},[c("pre",[c("code",[n._v('var Base64 = {\n\n_keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",\n\n//将字符串转换为Base64\nencode: function(input) {\n    var output = "";\n    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n    var i = 0;\n\n    while (i < input.length) {\n\n        chr1 = input.charCodeAt(i++);\n        chr2 = input.charCodeAt(i++);\n        chr3 = input.charCodeAt(i++);\n\n        enc1 = chr1 >> 2;\n        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n        enc4 = chr3 & 63;\n\n        if (isNaN(chr2)) {\n            enc3 = enc4 = 64;\n        } else if (isNaN(chr3)) {\n            enc4 = 64;\n        }\n        output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n    }\n    return output;\n},\n\n//将Base64解码为可读字符串\ndecode: function(input) {\n    var output = "";\n    var chr1, chr2, chr3;\n    var enc1, enc2, enc3, enc4;\n    var i = 0;\n\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, "");\n\n    while (i < input.length) {\n        enc1 = this._keyStr.indexOf(input.charAt(i++));\n        enc2 = this._keyStr.indexOf(input.charAt(i++));\n        enc3 = this._keyStr.indexOf(input.charAt(i++));\n        enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n        chr1 = (enc1 << 2) | (enc2 >> 4);\n        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n        chr3 = ((enc3 & 3) << 6) | enc4;\n\n        output = output + String.fromCharCode(chr1);\n\n        if (enc3 != 64) {\n            output = output + String.fromCharCode(chr2);\n        }\n        if (enc4 != 64) {\n            output = output + String.fromCharCode(chr3);\n        }\n    }\n    return output;\n\t}\n}\n')])])]),c("p",[n._v("首先定义一个Base64的索引值"),c("code",[n._v("_keyStr")]),n._v("，其中包含了A-/的64个字符，最后还加上填充值'=',索引值供编码以及解码时使用。")]),n._v(" "),c("p",[n._v("首先看编码方法(encode)，定义输入原始字符串的连续三个字符chr1,chr2，chr3，输出的4个二进制字符enc1，enc2，enc3，enc4，通过一个变量"),c("code",[n._v("i")]),n._v("遍历输入的原始字符串，以原始字符串“abcd”为例：")]),n._v(" "),c("p",[n._v("第一次循环：\n首先将第一次循环的三个字符转变为ASCII的十进制模式")]),n._v(" "),c("div",{staticClass:"language- extra-class"},[c("pre",[c("code",[n._v("chr1 = input.charCodeAt(i++);//chr1：a→97\nchr2 = input.charCodeAt(i++);//chr2：b→98\nchr3 = input.charCodeAt(i++);//chr3：c→99\nconsole.log(chr1)//97(0110 0001)\nconsole.log(chr2)//98(0110 0010)\nconsole.log(chr3)//99(0110 0011)\n")])])]),c("p",[n._v("有了ASCII的十进制值后，即可使用"),c("code",[n._v("位运算")]),n._v("，将 3 * 8 的二进制拆分为4 * 6的二进制模式，下面一步一步来看位运算是如何实现4 * 6拆分的：")]),n._v(" "),c("div",{staticClass:"language- extra-class"},[c("pre",[c("code",[n._v("enc1 = chr1 >> 2;\n/*计算enc1：将chr1右移两位：0110 0001→0001 1000*/\nconsole.log(enc1)//00011000\n\nenc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n/*计算enc2：\n/*取chr1的最后两位作为enc2的最高位，取chr2的高四位作为enc2的低四位，将两者通过或运算结合：\n/*( chr1 & 3 ) << 4= (0110 0001 & 0000 0011) << 4 = (00000001)<<4 = 0001 0000,\n/*(chr2 >> 4) = (0110 0010) >> 4 = 00000110,\n/*enc2=0001 0000 | 0000 0110=0001 0110\n/*console.log(enc2)//00010110\n*/\n\nenc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n/*计算enc3：\n/*取chr2的低四位和chr3的高两位组成enc2的低六位(高两位补零): \n/*(chr2 & 15) << 2 = (0110 0010 & 0000 1111) << 2 = 0000 0010 << 2 = 0000 1000, \n/*chr3 >> 6 = 0110 0011 >> 6 = 0000 0001,\n/*enc3 = 0000 1000 | 0000 0001 = 0000 1001\n/*console.log(enc3)//00001001\n*/\n\nenc4 = chr3 & 63;\n/*计算enc4：取chr3余下六位作为低六位(高两位补零)：\n/*enc4 = 0110 0011 & 0011 1111 = 0010 1011\n/*console.log(enc4)//00101011\n*/\n")])])]),c("p",[n._v("此时通过"),c("code",[n._v("this._keyStr.charAt(encx)")]),n._v("进行索引查找，得到的前三个字符的编码为"),c("code",[n._v("“YWJj”")]),n._v("。")]),n._v(" "),c("p",[n._v("分析完"),c("code",[n._v('"abcd"')]),n._v("的"),c("code",[n._v('"abc"')]),n._v('编码，也就是程序的第一次循环，还剩"d"未解析，此时需要进入第二次循环，由于d之后已经没有字符，故第二次循环时的'),c("code",[n._v("chr1")]),n._v("、"),c("code",[n._v("chr2")]),n._v("、"),c("code",[n._v("chr3")]),n._v("的结果为："),c("code",[n._v("100")]),n._v(","),c("code",[n._v("NaN")]),n._v(","),c("code",[n._v("NaN")]),n._v("。同理进行3 * 8 = 4 * 6编码时得到的最后编码为“ZA==”。")]),n._v(" "),c("p",[n._v('经过两次循环后，原始字符串"abcd"已经被全部遍历并编码，最后得到的Base64编码为"YWJjZA=="。')]),n._v(" "),c("p",[n._v("理解了"),c("code",[n._v("encode")]),n._v("方法后，再去进行解码'decode'就比较简单了，基本上就是编码的逆向操作，这里就不一一解释了。")]),n._v(" "),c("p",[n._v("##总结\nBase64作为一种传输二进制的编码格式，虽然编码后字符内容长度会增加大约1/3，但是在一定程度上保证了一些不可打印字符在传输时的的信息完整性，同时本文最后也通过使用JavaScript实现了Base64的编码以及解码，可以看到Base64也起到了一定的加密作用(起码不是人一眼就能看懂的),在实际项目中应根据具体需求和环境选用Base64编码。")]),n._v(" "),c("p",[n._v("(完)")]),n._v(" "),c("p",[n._v("参考资料：")]),n._v(" "),c("p",[c("a",{attrs:{href:"https://en.wikipedia.org/wiki/Base64",target:"_blank",rel:"noopener noreferrer"}},[n._v("Base64"),c("OutboundLink")],1)]),n._v(" "),c("p",[c("a",{attrs:{href:"http://fm4dd.com/programming/base64/base64_algorithm.htm",target:"_blank",rel:"noopener noreferrer"}},[n._v("Base64 algorithm"),c("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=a.exports}}]);