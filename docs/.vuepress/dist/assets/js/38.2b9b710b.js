(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{512:function(e,n,t){"use strict";t.r(n);var a=t(62),s=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("本系列前两篇文章"),t("a",{attrs:{href:"http://geocld.github.io/2019/07/16/react-native-bundle-split/",target:"_blank",rel:"noopener noreferrer"}},[e._v("低版本react-native bundle拆包---jsbundle的拆解实践(一)"),t("OutboundLink")],1),e._v("、"),t("a",{attrs:{href:"http://geocld.github.io/2019/08/01/react-native-bundle-split-android/",target:"_blank",rel:"noopener noreferrer"}},[e._v("低版本react-native bundle拆包---Android异步加载实践(二)"),t("OutboundLink")],1),e._v("分别介绍了如何将React-native生产包拆分成基础包(common.jsbundle)和业务包(business.jsbundle)并在Android端进行业务包接入、分步加载jsbundle，本篇文章将介绍如何在iOS端进行jsbundle的分步加载。")]),e._v(" "),t("blockquote",[t("p",[e._v("注1：")]),e._v(" "),t("p",[e._v("本文将全面涉及iOS开发以及Objective-c语言，如果对这二者不了解那本文对你来说将比较难懂，建议有知识储备再进行阅读。")])]),e._v(" "),t("blockquote",[t("p",[e._v("注2:")]),e._v(" "),t("p",[e._v("本文实验代码基于react-native v0.55.4，但本文主要涉及react-native原生方面的jsbundle加载，理论上加载方式在任何版本的react-native下都适用。")])]),e._v(" "),t("h2",{attrs:{id:"react-native在ios下的启动流程简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-native在ios下的启动流程简介"}},[e._v("#")]),e._v(" react-native在iOS下的启动流程简介")]),e._v(" "),t("p",[e._v("按照惯例我们先来过一下iOS端的RN加载流程，在"),t("a",{attrs:{href:"http://geocld.github.io/2019/08/01/react-native-bundle-split-android/",target:"_blank",rel:"noopener noreferrer"}},[e._v("低版本react-native bundle拆包---Android异步加载实践(二)"),t("OutboundLink")],1),e._v("中我们看到RN在Android下加载涉及了"),t("code",[e._v("Application")]),e._v("、"),t("code",[e._v("Activity")]),e._v("、"),t("code",[e._v("Delegate")]),e._v("等诸多概念，在iOS下的加载就简单得多，来看下RN初始化项目ios文件夹的内容，核心文件就一个"),t("code",[e._v("AppDelegate.m")]),e._v("，这个类似于Android的"),t("code",[e._v("Application")]),e._v("，即在应用首次打开的时候会执行里面的内容，"),t("code",[e._v("AppDelegate.m")]),e._v("的内容也很简单，主要就是RN的初始化和视图加载:")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('@implementation AppDelegate\n  - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n  NSURL *jsCodeLocation;\n  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@"index" fallbackResource:nil];\n  \n  // 初始化react-native rootview\n  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation\n                                                      moduleName:@"RN_bundle_split"\n                                               initialProperties:nil\n                                                   launchOptions:launchOptions];\n  rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];\n\n  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n  UIViewController *rootViewController = [UIViewController new];\n  \n  // 将react-native view加载到viewController中\n  rootViewController.view = rootView;\n  self.window.rootViewController = rootViewController;\n  [self.window makeKeyAndVisible];\n  return YES;\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br")])]),t("p",[t("code",[e._v("AppDelegate.m")]),e._v("就是获取jsbundle的本地路径或线上路径，然后使用"),t("code",[e._v("RCTRootView")]),e._v("初始化一个视图，初始化传入jsbundle的路径和appkey，最后再将视图添加到iOS的"),t("code",[e._v("viewController")]),e._v("中，这样iOS端整个RN的加载渲染就完成了，是不是很简单？")]),e._v(" "),t("h2",{attrs:{id:"接入多个jsbundle"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接入多个jsbundle"}},[e._v("#")]),e._v(" 接入多个jsbundle")]),e._v(" "),t("p",[e._v("了解了iOS端的加载流程后，很容易就可以知道，如果要接入多个jsbundle，那么只需要新创建一个"),t("code",[e._v("viewController")]),e._v("，再按照"),t("code",[e._v("AppDelegate.m")]),e._v("的"),t("code",[e._v("RootView")]),e._v("初始化方法加载不同的jsbundle路径和appKey就可以轻松实现。")]),e._v(" "),t("h2",{attrs:{id:"jsbundle分步加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jsbundle分步加载"}},[e._v("#")]),e._v(" jsbundle分步加载")]),e._v(" "),t("p",[e._v("##1.加载基础包")]),e._v(" "),t("p",[e._v("在"),t("code",[e._v("AppDelegate")]),e._v("中，react-native初始化视图是使用了"),t("code",[e._v("RCTRootView")]),e._v("类提供的"),t("code",[e._v("initWithBundleURL")]),e._v("方法来加载一个完整的jsbundle，事实上，查看"),t("code",[e._v("RCTRootView")]),e._v("类的源码，发现这个类还提供了"),t("code",[e._v("initWithBridge")]),e._v("方法来初始化RN视图，react-native bridge在iOS的概念就类似Android的"),t("code",[e._v("reactContext")]),e._v("，因此，先使用"),t("code",[e._v("RCTBridge")]),e._v("类加载基础包创建一个bridge:")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#import "RCTBridge.h"\n\nNSURL *jsCodeLocation = [NSURL URLWithString:[[NSBundle mainBundle] pathForResource:@"common.jsbundle" ofType:nil]];\n  \nbridge = [[RCTBridge alloc] initWithBundleURL:jsCodeLocation\n                                 moduleProvider:nil launchOptions:launchOptions];\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("至此，一个包含基础包运行逻辑的js bridge已经完成，接下来就是在这个bridge的基础上运行业务包内的代码，从而得到完整的bridge。")]),e._v(" "),t("p",[e._v("##2.加载业务包")]),e._v(" "),t("p",[e._v("js bridge加载业务包代码，需要使用react-native"),t("code",[e._v("RCTBridge")]),e._v("的"),t("code",[e._v("executeSourceCode")]),e._v("方法，该方法传入的内容为js代码并执行，但这个方法并没有开发，因此，我们需要手动将这个方法暴露出来，项目根目录下新创建一个"),t("code",[e._v("RCTBridge.h")]),e._v("，内容如下：")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#import <Foundation/Foundation.h>\n\n@interface RCTBridge (RnLoadJS)\n\n - (void)executeSourceCode:(NSData *)sourceCode sync:(BOOL)sync;\n\n@end\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("然后在需要加载业务包的地方"),t("code",[e._v('#import "RCTBridge.h"')]),e._v("，读取业务包的内容并进行加载:")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('NSLog(@"subapp:业务包加载开始");\nNSString * busJsCodeLocation = [[NSBundle mainBundle] pathForResource:@"business.ios.jsbundle" ofType:nil];\n\nNSData * sourceBus = [NSData dataWithContentsOfFile:busJsCodeLocation options:NSDataReadingMappedIfSafe error:nil];\n\n[(RCTBridge *)bridge.batchedBridge executeSourceCode:sourceBus sync:YES];\nNSLog(@"subapp:业务包加载结束");\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("##3.加载视图")]),e._v(" "),t("p",[e._v("最后就是使用第一点里提到"),t("code",[e._v("RCTRootView")]),e._v("类里的"),t("code",[e._v("initWithBridge")]),e._v("将分别加载了基础包和业务包的bridge传入，加上appKey初始化一个"),t("code",[e._v("RCTRootView")]),e._v("，再添加到"),t("code",[e._v("viewController")]),e._v("的"),t("code",[e._v("view")]),e._v("即可：")]),e._v(" "),t("div",{staticClass:"language-objective-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('RCTRootView * root = [[RCTRootView alloc] initWithBridge:bridge moduleName:@"RN_bundle_split_business" initialProperties:initialProperties];\n\nself.view = root;\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("h2",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),t("p",[e._v("至此，react-native打包拆包、Android端和iOS端分步加载的基本思路和关键点已经介绍完毕，可以看出，整个的加载分包流程还是要归功于javascript的灵活性，可以随时注入新的js代码。react-native能把js加载和视图绑定设计得非常巧妙，而且提供的接口刚好也适合分包，完全不需要额外的源代码修改和使用反射。另外在进行分步加载操作时也可以根据本文的思路自有发挥加载的时序，如加载时序利用好了可以做到进入业务视图秒加载的效果。")]),e._v(" "),t("p",[e._v("（完）")]),e._v(" "),t("p",[e._v("参考:")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/tyro_smallnew/article/details/83660345",target:"_blank",rel:"noopener noreferrer"}},[e._v("React native拆包之 原生加载多bundle"),t("OutboundLink")],1)])])}),[],!1,null,null,null);n.default=s.exports}}]);